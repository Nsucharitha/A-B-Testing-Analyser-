# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15R_J0M8I518QOKKfnQKXh35ZDKlZzbFI
"""

import streamlit as st
import pandas as pd
import numpy as np
from statsmodels.stats.proportion import proportions_ztest
import matplotlib.pyplot as plt

st.set_page_config(page_title="A/B Test Analyzer", layout="centered")

st.title("Automated A/B Testing Analyzer")

uploaded_file = st.file_uploader("Upload your A/B test CSV", type=["csv"])

st.markdown("ðŸ“¥ [Download sample CSV](https://github.com/Nsucharitha/A-B-Testing-Analyser-/blob/main/sample_dataset.csv)")

if uploaded_file:
    df = pd.read_csv(uploaded_file)

    required_cols = {'group', 'converted'}
    if not required_cols.issubset(df.columns):
        st.error("The file must contain at least 'group' and 'converted' columns.")
    else:
        control = df[df['group'] == 'control']
        treatment = df[df['group'] == 'treatment']

        # Conversion rate calculations
        conv_ctrl = control['converted'].mean()
        conv_trt = treatment['converted'].mean()
        uplift = (conv_trt - conv_ctrl) / conv_ctrl * 100

        # Z-test
        successes = [treatment['converted'].sum(), control['converted'].sum()]
        samples = [len(treatment), len(control)]
        stat, pval = proportions_ztest(count=successes, nobs=samples)

        st.subheader("Results")
        st.write(f"**Control Conversion Rate**: {conv_ctrl:.3f}")
        st.write(f"**Treatment Conversion Rate**: {conv_trt:.3f}")
        st.write(f"**Uplift**: {uplift:.2f}%")
        st.write(f"**P-value**: {pval:.4f}")
        st.markdown(
            "**Significant?** " +
            ("Yes!" if pval < 0.05 else " No significant difference.")
        )

        # Plot Conversion Chart
        means = [conv_ctrl, conv_trt]
        sizes = [len(control), len(treatment)]
        se = [np.sqrt((p * (1 - p)) / n) for p, n in zip(means, sizes)]
        ci_lower = [m - 1.96 * s for m, s in zip(means, se)]
        ci_upper = [m + 1.96 * s for m, s in zip(means, se)]
        groups = ['Control', 'Treatment']
        x = np.arange(len(groups))

        fig, ax = plt.subplots(figsize=(6, 5))
        ax.bar(x, means, yerr=[np.array(means) - ci_lower, ci_upper - np.array(means)],
               capsize=10, color=['skyblue', 'lightgreen'])
        ax.set_xticks(x)
        ax.set_xticklabels(groups)
        ax.set_ylabel("Conversion Rate")
        ax.set_title("Conversion Rate by Group (with 95% CI)")
        ax.text(0.5, max(means) + 0.01, f"Uplift: {uplift:.2f}%", ha='center', fontsize=10, fontweight='bold')
        ax.grid(axis='y', linestyle='--', alpha=0.6)
        st.pyplot(fig)

        # Optional metrics
        if 'revenue' in df.columns:
            st.subheader("Revenue Analysis")
            st.write(f"Avg Revenue - Control: ${control['revenue'].mean():.2f}")
            st.write(f"Avg Revenue - Treatment: ${treatment['revenue'].mean():.2f}")

        if 'session_duration' in df.columns:
            st.subheader("Session Duration Analysis")
            st.write(f"Avg Duration - Control: {control['session_duration'].mean():.2f} sec")
            st.write(f"Avg Duration - Treatment: {treatment['session_duration'].mean():.2f} sec")
